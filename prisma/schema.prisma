// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// A simple Chat schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

// The User model is used by the NextAuth.js authentication library
model User {
  id       String  @id @default(uuid())
  email    String? @unique
  name     String?
  role     Role?   @default(USER)

  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())

  reviews  Review[]
  accounts Account[]
}

// Define the Game model
model Game {
  id            Int       @id @default(autoincrement())
  title         String
  description   String?
  releaseDate   DateTime?
  developer     String?
  publisher     String?
  genre         String?
  platform      String?
  averageRating Float?

  // Define the relationship to reviews
  reviews Review[]
}

// Define the Review model
model Review {
  id         Int      @id @default(autoincrement())
  rating     Float
  reviewText String?
  reviewDate DateTime @default(now())

  // Define the relationship to users
  user   User   @relation(fields: [userId], references: [id])
  userId String

  // Define the relationship to games
  game   Game @relation(fields: [gameId], references: [id])
  gameId Int
}

// The Account model is used by the NextAuth.js authentication library
model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// The PasswordResetToken and VerificationToken models are used by the NextAuth.js authentication library
model PasswordResetToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model VerificationToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}
